#!/usr/bin/env python

import rospy
import roslib
from sensor_msgs.msg import JointState
from robotiq_s_model_control.msg import _SModel_robot_input  as inputMsg
from time import sleep

# TODO
def calculateAngle(finger, joint, fingerPosition):
    return 12.75


# TODO
def calulatePalmAngle(fingerPosition):
    return 10.0


def updateLocalJointState(inputRegisterMessage):
    rospy.loginfo(rospy.get_caller_id() + "Input Registers " + "gPOA:" + str(inputRegisterMessage.gPOA)
	 + " gPOC:" + str(inputRegisterMessage.gPOB)
	 + " gPOB:" + str(inputRegisterMessage.gPOC)
	 + " gPOS:" + str(inputRegisterMessage.gPOS))

    for finger in range(0, 3): 
        position = inputRegisterMessage.gPOA
        #if (finger==1):
        #    position = inputRegisterMessage.gPOB
        #elif(finger==2):
        #    position = inputRegisterMessage.gPOC
        for joint in range(0, 3):            
            currentJointState.position[finger*3+joint] = calculateAngle(finger, joint, position)

    currentJointState.position[9] = calulatePalmAngle(inputRegisterMessage.gPOS)
    currentJointState.position[10] = currentJointState.position[9]
    
    
def generateJointStatesFromRegisterStateAndPublish():
    rospy.Subscriber("SModelRobotInput", inputMsg.SModel_robot_input, updateLocalJointState)

    global currentJointState 
    currentJointState = JointState()
    currentJointState.name = ["robotiq_finger_1_joint_1", "robotiq_finger_1_joint_2", "robotiq_finger_1_joint_3", "robotiq_finger_2_joint_1", "robotiq_finger_2_joint_2", "robotiq_finger_2_joint_3", "robotiq_finger_middle_joint_1", "robotiq_finger_middle_joint_2", "robotiq_finger_middle_joint_3", "robotiq_palm_finger_1_joint", "robotiq_palm_finger_2_joint"]

    currentJointState.position = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    currentJointState.velocity = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    currentJointState.effort = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    pub = rospy.Publisher('SModelRobotJointState', JointState, queue_size=1) #no buffering?
    rospy.init_node('robotiq_s_model_joint_state_publisher', anonymous=False)
    rate = rospy.Rate(100) # publishes at 10Hz

    while not rospy.is_shutdown():
        #rospy.loginfo("bubu")
        currentJointState.header.stamp = rospy.Time.now()
        pub.publish(currentJointState)
        rate.sleep()

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()


if __name__ == '__main__':
    try:
        generateJointStatesFromRegisterStateAndPublish()
    except rospy.ROSInterruptException:
        pass
